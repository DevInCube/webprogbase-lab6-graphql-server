type User {
  id: ID!
  username: String!
  rooms: [ChatRoom!]!
  currentRoom: ChatRoom
}

type ChatRoom {
  id: ID!
  name: String!
  timestamp: String!
  owner: User!
  members: [User!]!
  lastMessages: [ChatMessage!]!
}

type ChatMessage {
  id: ID!
  room: ChatRoom!
  timestamp: String!
  author: User!
  text: String!
}

type Query {
  usernameExists(username: String!): Boolean!
  register(username: String!, password: String!): User
  login(username: String!, password: String!): String!
  me: User!
  users: [User!]!
  rooms: [ChatRoom!]!
}

type Mutation {
  createRoom(name: String!): ChatRoom!
  updateRoom(id: ID!, name: String!): ChatRoom!
  deleteRoom(id: ID!): ChatRoom!
  joinRoom(roomId: ID!): ChatRoom!
  leaveCurrentRoom: ChatRoom!
  createMessage(text: String!): ChatMessage!
}

type Subscription {
  roomCreated: ChatRoom!
  roomUpdated: ChatRoom!
  roomDeleted: ChatRoom!
  currentRoomChanged: User!
  memberJoined: User!
  memberLeft: User!
  messageCreated: ChatMessage!
}